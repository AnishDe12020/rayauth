{"version":3,"sources":["../src/hooks/useAuth.tsx","../src/helpers/fetchUser.ts","../src/constants.ts","../src/classes/user.ts","../src/store/index.ts","../src/helpers/context.ts","../src/providers/index.tsx","../src/classes/eventListener.ts","../src/helpers/sleep.ts","../src/hooks/useSessionProgram.tsx","../src/types/rayauth_session.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { userConstructor } from \"../classes\";\nimport { getUser } from \"../helpers/fetchUser\";\nimport { useConfig } from \"../providers\";\nimport { BASEURL, WALLET } from \"../constants\";\nimport { walletListener } from \"../classes/eventListener\";\nimport { store } from \"../store\";\nimport {\n  clusterApiUrl,\n  Connection,\n  Transaction,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { sleep } from \"../helpers\";\nimport hex from \"hex-array\";\n\nimport { providers } from \"../enums\";\n\nexport function useAuth() {\n  const config = useConfig();\n  const cookieName: string = config.cookieName || \"jwt-rayauth\";\n  const syncstore = store();\n  const [user, setUser] = useState<userConstructor | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cookies, setCookie, removeCookie] = useCookies([cookieName]);\n\n  const connection = useMemo(() => new Connection(clusterApiUrl(\"devnet\")), []);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      console.log(\"CHAL RHA\");\n      setIsLoading(true);\n      if (!cookies[cookieName]) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"YAHA BHI CHAL RHA\");\n\n      const user = await getUser(cookies[cookieName], syncstore);\n      console.log(\"USER CHAL RHA\");\n\n      setUser(user);\n\n      setIsLoading(false);\n      console.log(\"PURA CHAL RHA\", user.state);\n    };\n    fetchUser();\n  }, [cookies]);\n\n  const handleCallback = () => {\n    console.log(\"RUNNING CALLBACK\");\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const jwt = urlParams.get(\"jwt\");\n    if (jwt && cookies[cookieName]) {\n      console.log(\"exists\", cookies[cookieName]);\n      removeCookie(cookieName);\n      console.log(setCookie(cookieName, jwt));\n    }\n    if (jwt && !cookies[cookieName]) {\n      console.log(setCookie(cookieName, jwt.toString()));\n    }\n  };\n\n  const signIn = (prov?: providers) => {\n    const url = new URL(`${BASEURL}/auth/${prov || config.provider}`);\n    url.searchParams.append(\"cb\", config.callbackUrl);\n    url.searchParams.append(\"id\", config.clientId);\n    console.log(url.toString());\n    window.location.replace(url.toString());\n  };\n\n  const signOut = () => {\n    removeCookie(cookieName);\n  };\n\n  async function signTransaction(\n    transaction: Transaction | VersionedTransaction\n  ): Promise<Transaction | VersionedTransaction> {\n    try {\n      console.log(user);\n      console.log(user?.state);\n      console.log(\"waw\");\n      const url = new URL(`${WALLET}/sign-transaction`);\n\n      if (\n        transaction instanceof Transaction &&\n        transaction.recentBlockhash === null\n      ) {\n        let blockhash = (await connection.getLatestBlockhash(\"finalized\"))\n          .blockhash;\n\n        transaction.recentBlockhash = blockhash;\n      }\n\n      url.searchParams.append(\n        \"txn\",\n        hex.toString(transaction.serialize({ requireAllSignatures: false }))\n      );\n      console.log(\n        \"hex\",\n        hex.toString(transaction.serialize({ requireAllSignatures: false }))\n      );\n      console.log(\"url\", url.toString());\n      user?.state.setSrc(url.toString());\n      user?.state.setVisible(true);\n      const res = await loopTxnData();\n      user?.state.setVisible(false);\n      return res;\n    } catch (e) {\n      console.error(e);\n      throw new Error(\"Can't execute send transaction\");\n    }\n  }\n\n  const sendTransaction = async (\n    transaction: Transaction | VersionedTransaction\n  ) => {\n    try {\n      const signedTransaction = await signTransaction(transaction);\n      console.log(\"signed\", signedTransaction);\n      const signature = await connection.sendRawTransaction(\n        signedTransaction.serialize()\n      );\n\n      return signature;\n    } catch (e) {\n      console.error(e);\n      throw new Error(\"Can't execute send transaction\");\n    }\n  };\n\n  async function loopTxnData(): Promise<any> {\n    const startTime = new Date().getTime();\n    let data = null;\n    console.log(\"pre loob\", data);\n    while (data == null || startTime - new Date().getTime() >= 15000) {\n      console.log(\"loop running\");\n\n      window.onmessage = function (e) {\n        console.log(e.data);\n        if (e.data.type == \"signtransac\") {\n          console.log(true);\n        }\n        if (e.data.type == \"txnData\") {\n          console.log(true);\n          console.log(\"loop data\", e.data);\n          data = e.data;\n          console.log(\"data be like\", data);\n        }\n      };\n\n      await sleep(1000); // assuming sleep() is an async function that waits for a specified amount of time\n    }\n    return data;\n  }\n  return {\n    signIn,\n    signOut,\n    user,\n    isLoading,\n    handleCallback,\n    walletListener,\n    signTransaction,\n    sendTransaction,\n  };\n}\n","import axios from \"axios\";\nimport { userConstructor } from \"../classes\";\nimport { BASEURL } from \"../constants\";\n\nexport async function getUser(jwt: string, store: unknown): Promise<userConstructor> {\n  const data = await axios.get(`${BASEURL}/user`, {\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n    },\n  });\n  console.log(data.data)\n\n  const returnData = new userConstructor({\n    id: data.data.id,\n    createdAt: data.data.createdAt, \n    updatedAt: data.data.updatedAt,\n    email: data.data.email,\n    address: data.data.address,\n    avatar: data.data.avatar,\n    store: store\n  });\nconsole.log(\"constructor\", returnData)\n  return returnData;\n}\n\n// model User {\n//     id            String          @id @default(auto()) @map(\"_id\") @db.ObjectId\n//     createdAt     DateTime        @default(now())\n//     updatedAt     DateTime        @updatedAt\n//     email         String          @unique\n//     address       String          @unique\n//     name          String?\n//     avatar        String?\n//     bio           String?\n//     twitter       String?\n//     metadata      Json?\n//     Project       Project[]\n//     ProjectMember ProjectMember[]\n//     ClientSecret  ClientSecret[]\n//     Session       Session[]\n//   }\n","export const BASEURL: string = \"http://localhost:8080\";\nexport const WALLET: string = \"http://localhost:3000/wallet\"","import { userOptions } from \"../interfaces\";\nimport { Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { WALLET } from \"../constants\";\nimport { EventEmitter } from \"sweet-event-emitter\";\n\nexport class userConstructor {\n  public id!: string | undefined;\n  public createdAt!: string | undefined;\n  public updatedAt!: string | undefined;\n  public email!: string | undefined;\n  public address!: string | undefined;\n  public avatar!: string | undefined;\n  public event: EventEmitter;\n  public state: any;\n\n  constructor(options?: userOptions) {\n    this.id = options?.id;\n    this.createdAt = options?.createdAt;\n    this.updatedAt = options?.updatedAt;\n    this.email = options?.email;\n    this.address = options?.address;\n    this.avatar = options?.address;\n    this.event = new EventEmitter();\n    this.state = options?.store\n  }\n\n  public sendTransaction(\n    transaction: Transaction | VersionedTransaction,\n    isgassless: boolean,\n    options?: {}\n  ) {\n    try {\n      \n      console.log(\"waw\");\n      const url = new URL(`${WALLET}/send-transaction`);\n      url.searchParams.append(\"txn\", transaction.serialize().toString());\n      url.searchParams.append(\n        \"options\",\n        options?.toString() || String({ data: \"empty\" })\n      );\n      url.searchParams.append(\"isgasless\", String(isgassless));\n    } catch {\n      throw new Error(\"Can't execute send transaction\");\n    }\n  }\n\n  public signTransaction(transaction: Transaction | VersionedTransaction) {\n    try {\n      console.log(this)\n      console.log(this.state)\n      console.log(\"waw\");\n      const url = new URL(`${WALLET}/sign-transaction`);\n\n      url.searchParams.append(\n        \"txn\",\n        transaction.serialize({ requireAllSignatures: false }).toString()\n      );\n      \n      this.state.setSrc(url.toString());\n       this.state.setVisible(true);\n    } catch (e) {\n      console.error(e);\n      throw new Error(\"Can't execute send transaction\");\n    }\n  }\n\n  public signAllTransactions(\n    transactions: Transaction[] | VersionedTransaction[]\n  ) {\n    try {\n      const url = new URL(`${WALLET}/sign-all-transactions`);\n      url.searchParams.append(\n        \"txns\",\n        transactions.map((tx) => tx.serialize().toString()).toString()\n      );\n    } catch {\n      throw new Error(\"Can't execute signing of all transactions\");\n    }\n  }\n\n  public signMessage(message: string, isgasless: boolean, options?: {}) {\n    try {\n      const url = new URL(`${WALLET}/sign-message`);\n      url.searchParams.append(\"msg\", message);\n      url.searchParams.append(\"address\", this.address || \"NOT-FOUND\");\n      url.searchParams.append(\"isgasless\", String(isgasless));\n    } catch {\n      throw new Error(\"Can't execute signing of message\");\n    }\n  }\n\n  private toggleIframe(src: string, isVisible: boolean) {\n    this.state?.setSrc(src);\n    this.state.setVisible(isVisible);\n  }\n\n  public async testSign(msg: string): Promise<any> {\n    try {\n      const url = new URL(`${WALLET}?msg=${msg}`);\n      url.searchParams.append(\"txn\", msg);\n      this.toggleIframe(url.toString(), true);\n      const result = await this.loopTxnData();\n      this.toggleIframe(WALLET, false);\n      return result;\n    } catch {\n      throw new Error(\"Can't execute send transaction\");\n    }\n  }\n\n  public async loopTxnData(): Promise<any> {\n    const startTime = new Date().getTime();\n    let data = null;\n    console.log(\"pre loob\", data);\n    while (data == null || startTime - new Date().getTime() >= 15000) {\n      console.log(\"loop running\");\n\n      window.onmessage = function (e) {\n        console.log(e.data);\n        if (e.data.type == \"signtransac\") {\n          console.log(true);\n        }\n        if (e.data.type == \"txnData\") {\n          console.log(true);\n          console.log(\"loop data\", e.data);\n          data = e.data;\n          console.log(\"data be like\", data);\n        }\n      };\n\n      await sleep(1000); // assuming sleep() is an async function that waits for a specified amount of time\n    }\n    return data;\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { create } from \"zustand\";\nimport { WALLET } from \"../constants\";\nconst store = create((set) => ({\n  count: 1,\n  isHidden: true,\n  src: WALLET,\n  txnData: {},\n  setTxnData: (value: {}) =>\n    set((state: { txnData: {} }) => ({ txnData: value })),\n  setVisible: (value: boolean) =>\n    set((state: { isHidden: boolean }) => ({ isHidden: !value })),\n  setSrc: (value: string) => set((state: { src: string }) => ({ src: value })),\n}));\n\nexport { store };\n","import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\";\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean;\n  hookName?: string;\n  providerName?: string;\n  errorMessage?: string;\n  name?: string;\n  defaultValue?: T;\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>\n];\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n  } = options;\n\n  const Context = createReactContext<T | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useContext() {\n    const context = useReactContext(Context);\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName)\n      );\n      error.name = \"ContextError\";\n      Error.captureStackTrace?.(error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>;\n}\n","import { store } from \"../store\";\nimport { createContext } from \"../helpers/context\";\nimport { config } from \"../interfaces\";\nimport React, { useEffect } from \"react\";\nimport { handleWallet } from \"../helpers/handleWallet\";\nconst [RayAuthConfigProvider, useConfig] = createContext<config>();\nexport { useConfig };\n\nexport const RayAuthProvider = ({\n  children,\n  config,\n}: {\n  children: React.ReactNode;\n  config: config;\n}) => {\n  const state:any = store()\n  console.log(\"state\",state.count)\n  useEffect(() => {\n    handleWallet(state);\n  }, [])\n  return (\n    <RayAuthConfigProvider value={config}>\n      <div> \n       <iframe hidden={Boolean(state.isHidden)}  height={1000} width={800} src={state.src}></iframe>\n      <div hidden={Boolean(!state.isHidden)}> \n      {children}\n      </div>\n      </div>\n    </RayAuthConfigProvider>\n  );\n};\n","import { EventEmitter } from \"sweet-event-emitter\";\n\n\nexport class WalletListener {\n    private event: EventEmitter\n\n\n    constructor() {\n        this.event = new EventEmitter()\n    }\n    \n    \n    public eventEmitter(): EventEmitter {\n      return this.event\n    }\n\n    public onSignTransac(func: (data: {}) => void) {\n        this.event.on(\"signTransac\", func)\n    }\n}\n\nexport const walletListener:WalletListener = new WalletListener()","export \nfunction sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import {\n  clusterApiUrl,\n  Connection,\n  Keypair,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport { useEffect, useMemo } from \"react\";\nimport { Buffer } from \"buffer\";\n\nimport { IDL, RayauthSession } from \"../types/rayauth_session\";\nimport { useAuth } from \"./useAuth\";\n\nexport const SESSION_PROGRAM_ID = \"QMj41mN3j168KTuUWNrCgbSAYQ7o9QTaaSnT9gLvW9s\";\n\nexport const useSessionProgram = () => {\n  const connection = useMemo(() => new Connection(clusterApiUrl(\"devnet\")), []);\n  const {user, signTransaction} = useAuth()\n  \n\n  useEffect(() => {\n    window.Buffer = Buffer;\n  });\n\n  const anchorWallet = useMemo(() => {\n    if (!user?.address) return;\n\n    return {\n      publicKey: new PublicKey(user.address),\n      signTransaction: signTransaction,\n      signAllTransactions: user.signAllTransactions,\n    };\n  }, [user]);\n\n  const anchorProvider = useMemo(() => {\n    if (!anchorWallet) return;\n\n    return new AnchorProvider(connection, anchorWallet as any, {\n      commitment: \"confirmed\",\n    });\n  }, [connection, anchorWallet]);\n\n  console.log(\"anchorWallet\", anchorWallet);\n  console.log(\"anchorProvider\", anchorProvider);\n\n  const sessionProgram: Program<RayauthSession> | undefined = useMemo(() => {\n    if (!anchorProvider) return;\n\n    return new Program(IDL, SESSION_PROGRAM_ID, anchorProvider);\n  }, [anchorProvider]);\n\n  console.log(\"sessionProgram\", sessionProgram);\n\n  const addSessionToken = async (\n    timestamp: number = Math.floor(Date.now() / 1000) + 3600\n  ) => {\n    if (!sessionProgram) {\n      console.log(\"ched\");\n      return;\n    }\n\n    const sessionKeypair = new Keypair();\n    console.log(sessionKeypair);\n    const [sessionKeyPda] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"session_key\"), sessionKeypair.publicKey.toBuffer()],\n      sessionProgram.programId\n    );\n\n    console.log(\"doing tx\");\n\n    const addSessionKeyIx = await sessionProgram.methods\n      .addSessionKey(new BN(timestamp))\n      .accounts({\n        sessionKeyPda,\n        sessionKey: sessionKeypair.publicKey,\n        payer: anchorWallet?.publicKey,\n        user: anchorWallet?.publicKey,\n      })\n      .signers([sessionKeypair])\n      .rpc();\n\n    console.log(\"addSessionKeyIx\", addSessionKeyIx);\n\n    // console.log(\"addSessionKeyIx\", addSessionKeyIx);\n\n    // const tx = new Transaction().add(addSessionKeyIx);\n\n    // const signedTx = await user?.signTransaction(tx);\n\n    // console.log(\"signedTx\", signedTx);\n\n    // set the session token keypair in local storage\n\n    localStorage.setItem(\"sessionToken\", JSON.stringify(sessionKeypair));\n\n    return;\n  };\n\n  const getSessionKeypair = () => {\n    const sessionKeypair = localStorage.getItem(\"sessionToken\");\n\n    if (!sessionKeypair) return;\n\n    return Keypair.fromSecretKey(\n      Buffer.from(JSON.parse(sessionKeypair).secretKey)\n    );\n  };\n\n  const revokeSessionToken = async () => {\n    if (!sessionProgram) return;\n\n    const sessionKeypair = getSessionKeypair();\n\n    if (!sessionKeypair) return;\n\n    const [sessionKeyPda] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"session_key\"), sessionKeypair.publicKey.toBuffer()],\n      sessionProgram.programId\n    );\n\n    const revokeSessionKeyTx = await sessionProgram.methods\n      .revokeSessionKey()\n      .accounts({\n        sessionKeyPda,\n        user: anchorWallet?.publicKey,\n      })\n      .rpc();\n\n    console.log(\"revokeSessionKeyTx\", revokeSessionKeyTx);\n  };\n\n  return {\n    sessionProgram,\n    addSessionToken,\n    getSessionKeypair,\n    revokeSessionToken,\n  };\n};\n","export type RayauthSession = {\n  \"version\": \"0.1.0\",\n  \"name\": \"rayauth_session\",\n  \"instructions\": [\n    {\n      \"name\": \"addSessionKey\",\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"sessionKeyPda\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"expiresAt\",\n          \"type\": {\n            \"option\": \"i64\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"revokeSessionKey\",\n      \"accounts\": [\n        {\n          \"name\": \"sessionKeyPda\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"sessionKey\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"user\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"sessionKey\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"expiresAt\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"SessionKeyAdded\",\n      \"fields\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"expiresAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"SessionKeyRevoked\",\n      \"fields\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidExpiresAt\",\n      \"msg\": \"Invalid expires at\"\n    }\n  ]\n};\n\nexport const IDL: RayauthSession = {\n  \"version\": \"0.1.0\",\n  \"name\": \"rayauth_session\",\n  \"instructions\": [\n    {\n      \"name\": \"addSessionKey\",\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"sessionKeyPda\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"expiresAt\",\n          \"type\": {\n            \"option\": \"i64\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"revokeSessionKey\",\n      \"accounts\": [\n        {\n          \"name\": \"sessionKeyPda\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"user\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"sessionKey\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"user\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"sessionKey\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"expiresAt\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"SessionKeyAdded\",\n      \"fields\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"expiresAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"SessionKeyRevoked\",\n      \"fields\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"sessionKey\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidExpiresAt\",\n      \"msg\": \"Invalid expires at\"\n    }\n  ]\n};\n"],"mappings":"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","names":["useEffect","useMemo","useState","useCookies","axios","BASEURL","WALLET","EventEmitter","userConstructor","options","transaction","isgassless","url","WALLET","e","transactions","tx","message","isgasless","src","isVisible","_a","msg","result","startTime","data","sleep","ms","resolve","getUser","jwt","store","data","axios","BASEURL","returnData","userConstructor","create","store","create","set","WALLET","value","state","createReactContext","useReactContext","getErrorMessage","hook","provider","createContext","options","name","strict","hookName","providerName","errorMessage","Context","useContext","_a","context","error","React","useEffect","EventEmitter","WalletListener","func","walletListener","RayAuthConfigProvider","useConfig","createContext","clusterApiUrl","Connection","Transaction","sleep","ms","resolve","hex","useAuth","config","useConfig","cookieName","syncstore","store","user","setUser","useState","isLoading","setIsLoading","cookies","setCookie","removeCookie","useCookies","connection","useMemo","Connection","clusterApiUrl","useEffect","getUser","handleCallback","jwt","signIn","prov","url","BASEURL","signOut","signTransaction","transaction","WALLET","Transaction","blockhash","res","loopTxnData","e","sendTransaction","signedTransaction","startTime","data","sleep","walletListener","clusterApiUrl","Connection","Keypair","PublicKey","AnchorProvider","BN","Program","useEffect","useMemo","Buffer","IDL","SESSION_PROGRAM_ID","useSessionProgram","connection","useMemo","Connection","clusterApiUrl","user","signTransaction","useAuth","useEffect","Buffer","anchorWallet","PublicKey","anchorProvider","AnchorProvider","sessionProgram","Program","IDL","addSessionToken","timestamp","sessionKeypair","Keypair","sessionKeyPda","addSessionKeyIx","BN","getSessionKeypair","revokeSessionKeyTx"]}